// const fs = require('fs');
// const path = require('path');
// const { OpenAI } = require('openai');
// const { searchRepairVideos } = require('./youtubeService');
// require('dotenv').config();

// const openai = new OpenAI({
//   apiKey: process.env.OPENAI_API_KEY,
// });

// function extractKeyword(text) {
//   // üîç On prend la premi√®re phrase qui semble contenir un objet ou un dommage
//   const lines = text.split('\n').map(line => line.trim()).filter(Boolean);

//   for (let line of lines) {
//     // Recherche simple d‚Äôun mot-cl√© ou d‚Äôun objet mentionn√©
//     if (line.toLowerCase().includes('objet') || line.toLowerCase().includes('dommage')) {
//       return line.split(':')[1]?.trim() || line;
//     }
//   }

//   // üîÅ Fallback : retourne les 3 premiers mots de la premi√®re ligne
//   return lines[0]?.split(' ').slice(0, 3).join(' ') || 'objet inconnu';
// }

// exports.detectObject = async (filePath) => {
//   try {
//     if (!fs.existsSync(filePath)) {
//       throw new Error('Fichier non trouv√© √† ce chemin : ' + filePath);
//     }

//     const imageData = fs.readFileSync(filePath, { encoding: 'base64' });

//     const response = await openai.chat.completions.create({
//       model: 'gpt-4-turbo',
//       messages: [
//         {
//           role: 'user',
//           content: [
//             {
//               type: 'text',
//               text: 'Analyse cette image, identifie l‚Äôobjet visible, les √©ventuels dommages, et propose des solutions.',
//             },
//             {
//               type: 'image_url',
//               image_url: {
//                 url: `data:image/jpeg;base64,${imageData}`,
//               },
//             },
//           ],
//         },
//       ],
//       max_tokens: 500,
//     });

//     const resultText = response.choices?.[0]?.message?.content || 'Aucune r√©ponse obtenue.';

//     // üëâ Extraire un mot-cl√© pour la recherche YouTube (option simple ici : prendre une ligne ou mot-cl√© du r√©sultat)
//     const keyword = extractKeyword(resultText); // Tu peux cr√©er cette fonction selon ton besoin

//     const videos = await searchRepairVideos(keyword);

//     return {
//       analysis: resultText,
//       videos: videos,
//     };
//   } catch (error) {
//     console.error("Erreur analyse image OpenAI :", error.response?.data || error.message || error);
//     throw new Error("Erreur analyse image OpenAI.");
//   }
// };


// exports.askOpenAI = async (text) => {
//   const response = await openai.chat.completions.create({
//     model: 'gpt-4-turbo',
//     messages: [{ role: 'user', content: text }],
//     max_tokens: 500
//   });

//   return response.choices[0].message.content;
// };


// const fs = require('fs');
// const { OpenAI } = require('openai');
// const { searchRepairVideos } = require('./youtubeService');
// require('dotenv').config();

// const openai = new OpenAI({
//   apiKey: process.env.OPENAI_API_KEY,
// });

// // ‚úÖ Utilise OpenAI pour extraire un mot-cl√© pertinent
// async function extractKeywordWithAI(text) {
//   try {
//     const response = await openai.beta.completions.create({
//       model: 'gpt-4-turbo',
//       messages: [
//         {
//           role: 'system',
//           content: 'Tu es un assistant qui extrait un mot-cl√© pertinent pour identifier un objet cass√© √† partir d‚Äôune analyse d‚Äôimage.',
//         },
//         {
//           role: 'user',
//           content: `Voici une analyse :\n${text}\n\nQuel est le mot-cl√© principal pour d√©crire l‚Äôobjet √† r√©parer ? R√©ponds uniquement par ce mot-cl√©.`,
//         },
//       ],
//       max_tokens: 20,
//     });

//     return response.choices[0].message.content.trim();
//   } catch (err) {
//     console.warn("‚ö†Ô∏è Erreur d'extraction du mot-cl√©. Fallback utilis√©.");
//     return 'objet cass√©';
//   }
// }
// exports.detectObject = async (filePath) => {
//   try {
//     if (!fs.existsSync(filePath)) {
//       throw new Error('Fichier non trouv√© √† ce chemin : ' + filePath);
//     }

//     const imageData = fs.readFileSync(filePath, { encoding: 'base64' });

//     const response = await openai.chat.completions.create({
//       model: 'gpt-4o',
//       messages: [
//         {
//           role: 'user',
//           content: [
//             {
//               type: 'text',
//               text: 'Analyse cette image. Identifie l‚Äôobjet principal, les dommages visibles, et propose une solution de r√©paration.',
//             },
//             {
//               type: 'image_url',
//               image_url: {
//                 url: `data:image/jpeg;base64,${imageData}`,
//               },
//             },
//           ],
//         },
//       ],
//       max_tokens: 800,
//     });

//     const resultText = response.choices?.[0]?.message?.content || 'Aucune r√©ponse obtenue.';

//     // üîç Option simple : extraire un mot-cl√© toi-m√™me si besoin
//     const keywordMatch = resultText.match(/(pot en terre cuite|vase|c√©ramique|assiette|tasse|verre|poterie|objet)/i);
//     const keyword = keywordMatch ? keywordMatch[1] : 'pot cass√©';

//     const allVideos = await searchRepairVideos(keyword);

//     const filteredVideos = allVideos.filter(video =>
//       video.title.toLowerCase().includes(keyword.toLowerCase()) ||
//       video.title.toLowerCase().includes('r√©parer') ||
//       video.title.toLowerCase().includes('restaurer') ||
//       video.title.toLowerCase().includes('kintsugi')
//     );

//     return {
//       analysis: resultText,
//       objet_detecte: keyword,
//       videos: filteredVideos.length > 0 ? filteredVideos : allVideos,
//     };
//   } catch (error) {
//     console.error("Erreur analyse image OpenAI :", error.response?.data || error.message || error);
//     throw new Error("Erreur analyse image OpenAI.");
//   }
// };
// //  Texte brut ‚Üí r√©ponse IA
// exports.askOpenAI = async (text) => {
//   const response = await openai.chat.completions.create({
//     model: 'gpt-4-turbo',
//     messages: [{ role: 'user', content: text }],
//     max_tokens: 500
//   });

//   return response.choices[0].message.content;
// };


// const fs = require('fs');
//  // Assure-toi que openai est export√©
// const { openai,extractKeywordFromText, askOpenAI} = require('./openaiService');
// const {searchRepairVideos } = require('./youtubeService');

// exports.detectObject = async (filePath) => {
//   try {
//     if (!fs.existsSync(filePath)) {
//       throw new Error('Fichier non trouv√© √† ce chemin : ' + filePath);
//     }

//     const imageData = fs.readFileSync(filePath, { encoding: 'base64' });

//     const response = await openai.chat.completions.create({
//       model: 'gpt-4o',
//       messages: [
//         {
//           role: 'user',
//           content: [
//             {
//               type: 'text',
//               text: 'Analyse cette image. Identifie l‚Äôobjet principal, les dommages visibles, et propose une solution de r√©paration.'
//             },
//             {
//               type: 'image_url',
//               image_url: {
//                 url: `data:image/jpeg;base64,${imageData}`,
//               },
//             },
//           ],
//         },
//       ],
//       max_tokens: 800,
//     });

//     const resultText = response.choices?.[0]?.message?.content || 'Aucune r√©ponse obtenue.';

//     // üß† Utilise l'extraction intelligente via OpenAI
//     const keyword = await extractKeywordFromText(resultText);

//     const allVideos = await searchRepairVideos(keyword);

//     const filteredVideos = allVideos.filter(video =>
//       video.title.toLowerCase().includes(keyword.toLowerCase()) ||
//       video.title.toLowerCase().includes('r√©parer') ||
//       video.title.toLowerCase().includes('restaurer') ||
//       video.title.toLowerCase().includes('kintsugi')
//     );

//     return {
//       analysis: resultText,
//       objet_detecte: keyword,
//       videos: filteredVideos.length > 0 ? filteredVideos : allVideos,
//     };
//   } catch (error) {
//     console.error("Erreur analyse image OpenAI :", error.response?.data || error.message || error);
//     throw new Error("Erreur analyse image OpenAI.");
//   }
// };



// const fs = require('fs');
// const { openai } = require('./openaiService');
// const { searchRepairVideos } = require('./youtubeService');

// exports.detectObject = async (filePath) => {
//   try {
//     // 1. Pr√©paration de l'image
//     const imageData = fs.readFileSync(filePath, { encoding: 'base64' });
//     const imageUrl = `data:image/jpeg;base64,${imageData}`;

//     // 2. Prompt ultra-d√©taill√© avec contraintes
//     const repairPrompt = `
//     Analyse cette image en suivant STRICTEMENT ces √©tapes :

//     1. Identification : 
//     - D√©cris l'objet principal avec pr√©cision (ex: "chargeur USB noir", "robinet de cuisine chrom√©")
//     - Mat√©riaux visibles (plastique, m√©tal, c√©ramique...)
//     - Marque si visible

//     2. Diagnostic :
//     - Probl√®me principal (cassure, fuite, dysfonctionnement √©lectrique...)
//     - √âl√©ments endommag√©s (c√¢ble, joint, surface...)
//     - Gravit√© (r√©parable/irr√©parable)

//     3. Solution pratique :
//     - Outils n√©cessaires (colles, tournevis, joint...)
//     - √âtapes concr√®tes num√©rot√©es
//     - Dur√©e estim√©e

//     Format de r√©ponse EXACT :
//     ===DEBUT===
//     Objet: [description compl√®te]
//     Probl√®me: [diagnostic technique]
//     R√©paration: [√©tapes pr√©cises]
//     Mat√©riel: [liste d'outils]
//     ===FIN===
//     `;

//     // 3. Appel API avec param√®tres stricts
//     const response = await openai.chat.completions.create({
//       model: 'gpt-4o',
//       messages: [
//         {
//           role: 'user',
//           content: [
//             { type: 'text', text: repairPrompt },
//             { type: 'image_url', image_url: { url: imageUrl } }
//           ]
//         }
//       ],
//       max_tokens: 1500,
//       temperature: 0.1, // R√©duit l'imagination de l'IA
//       response_format: { type: 'text' } // Force un format texte brut
//     });

//     // 4. Extraction rigoureuse
//     const rawText = response.choices[0].message.content;
//     const extractSection = (text, marker) => {
//       const regex = new RegExp(`${marker}:\\s*([^=]+)`);
//       const match = text.match(regex);
//       return match ? match[1].trim() : null;
//     };

//     const result = {
//       objet: extractSection(rawText, 'Objet') || 'Objet non identifi√©',
//       probleme: extractSection(rawText, 'Probl√®me') || 'Probl√®me non sp√©cifi√©',
//       solution: extractSection(rawText, 'R√©paration') || 'Contactez un professionnel',
//       materiel: extractSection(rawText, 'Mat√©riel') || 'Non sp√©cifi√©'
//     };

//     // 5. Recherche vid√©o cibl√©e
//     const videoKeywords = `${result.objet} r√©paration ${result.probleme.split(' ')[0]}`;
//     result.videos = await searchRepairVideos(videoKeywords);

//     return result;

//   } catch (error) {
//     console.error('Erreur critique:', error);
//     return {
//       objet: 'Erreur d\'analyse',
//       probleme: 'Impossible de traiter l\'image',
//       solution: 'Veuillez envoyer une photo plus claire',
//       videos: []
//     };
//   }
// };

// 


// const fs = require('fs');
// const { openai } = require('./openaiService');
// const { searchRepairVideos } = require('./youtubeService');

// exports.detectObject = async (filePath) => {
//   try {
//     // 1. Chargement strict de l'image
//     const imageData = fs.readFileSync(filePath, { encoding: 'base64' });

//     // 2. Prompt militaire avec contraintes extr√™mes
//     const REPAIR_PROMPT = `
//     TU DOIS IMP√âRATIVEMENT :
//     1. D√©crire l'objet visible (forme, mat√©riau, couleur)
//     2. Identifier le probl√®me technique (cassure, fuite, etc.)
//     3. Proposer 3 √©tapes MAX de r√©paration
//     4. Lister les outils n√©cessaires

//     FORMAT DE R√âPONSE EXACT :
//     ||OBJET|| [description technique]
//     ||PROBL√àME|| [diagnostic pr√©cis]
//     ||R√âPARATION|| 1. [√©tape 1] 2. [√©tape 2] 3. [√©tape 3]
//     ||OUTILS|| [liste technique]

//     SI TU NE VOIS PAS D'OBJET √Ä R√âPARER, R√âPONDRE :
//     ||ERREUR|| Photo non analysable

//     EXEMPLE POUR UN VASE CASS√â :
//     ||OBJET|| Vase en c√©ramique haute de 30cm, √©maillage blanc
//     ||PROBL√àME|| Cassure nette √† la base avec 2 morceaux d√©tach√©s
//     ||R√âPARATION|| 1. Nettoyer les bords 2. Appliquer colle epoxy 3. Maintenir 24h
//     ||OUTILS|| Colle epoxy, serre-joints, pinceau
//     `;

//     // 3. Appel API avec zero tol√©rance
//     const response = await openai.chat.completions.create({
//       model: 'gpt-4-vision-preview', // Meilleur mod√®le visuel
//       messages: [
//         {
//           role: 'system',
//           content: 'Tu es un expert en r√©paration. R√©ponds UNIQUEMENT dans le format demand√©.'
//         },
//         {
//           role: 'user',
//           content: [
//             { type: 'text', text: REPAIR_PROMPT },
//             { 
//               type: 'image_url',
//               image_url: `data:image/jpeg;base64,${imageData}`
//             }
//           ]
//         }
//       ],
//       max_tokens: 500,
//       temperature: 0 // Aucune imagination
//     });

//     // 4. Parsing brutal des r√©ponses
//     const parseResponse = (text) => {
//       const error = text.includes('||ERREUR||');
//       return {
//         objet: error ? null : text.split('||OBJET||')[1]?.split('||')[0]?.trim(),
//         probleme: error ? null : text.split('||PROBL√àME||')[1]?.split('||')[0]?.trim(),
//         reparation: error ? null : text.split('||R√âPARATION||')[1]?.split('||')[0]?.trim(),
//         outils: error ? null : text.split('||OUTILS||')[1]?.trim(),
//         error: error ? text.split('||ERREUR||')[1]?.trim() : null
//       };
//     };

//     const { objet, probleme, reparation, outils, error } = parseResponse(response.choices[0].message.content);

//     // 5. Gestion des erreurs
//     if (error || !objet) {
//       return {
//         error: error || "Objet non identifiable",
//         conseil: "Prenez la photo sous meilleur √©clairage, objet bien visible"
//       };
//     }

//     // 6. Recherche vid√©o ultra-cibl√©e
//     const videos = await searchRepairVideos(`${objet.split(' ')[0]} r√©paration ${probleme.split(' ')[0]}`);

//     return {
//       objet: objet,
//       probleme: probleme,
//       solution: reparation,
//       outils: outils,
//       videos: videos.filter(v => !v.title.includes('?')) // Filtre les mauvais r√©sultats
//     };

//   } catch (error) {
//     console.error('ERREUR CRITIQUE:', error);
//     return {
//       error: "Service indisponible",
//       details: "R√©essayez dans 5 minutes"
//     };
//   }
// };


// const fs = require('fs');
// const { openai } = require('./openaiService');
// const { searchRepairVideos } = require('./youtubeService');

// exports.detectObject = async (filePath) => {
//   try {
//     // 1. Chargement de l'image
//     const imageData = fs.readFileSync(filePath, { encoding: 'base64' });

//     // 2. Prompt optimis√© pour GPT-4o
//     const REPAIR_PROMPT = `
//     Analyse cette image d'objet √† r√©parer en r√©pondant STRICTEMENT dans ce format :

//     [OBJET] Description technique (mat√©riau, dimensions visibles)
//     [PROBLEME] Diagnostic pr√©cis (type de dommage)
//     [REPARATION] 3 √©tapes MAX avec :
//     1. √âtape 1
//     2. √âtape 2
//     3. √âtape 3
//     [OUTILS] Liste technique

//     Exemple :
//     [OBJET] Vase en c√©ramique (30cm), √©maillage blanc
//     [PROBLEME] Cassure nette avec 2 fragments d√©tach√©s
//     [REPARATION] 
//     1. Nettoyer les bords
//     2. Appliquer colle epoxy
//     3. Maintenir 24h sous pression
//     [OUTILS] Colle epoxy, serre-joints, pinceau fin
//     `;

//     // 3. Appel API avec le nouveau mod√®le
//     const response = await openai.chat.completions.create({
//       model: 'gpt-4o',
//       messages: [
//         {
//           role: 'system',
//           content: 'Tu es un expert en r√©paration. Sois technique et concis.'
//         },
//         {
//           role: 'user',
//           content: [
//             { type: 'text', text: REPAIR_PROMPT },
//             {
//               type: 'image_url',
//               image_url: {
//                 url: `data:${mimetype};base64,${imageData}`
//               }
//             }

//           ]
//         }
//       ],
//       max_tokens: 1000,
//       temperature: 0.2
//     });

//     // 4. Extraction des donn√©es
//     const extractData = (text) => {
//       const result = {
//         objet: text.match(/\[OBJET\](.+?)(?=\[|$)/s)?.[1]?.trim(),
//         probleme: text.match(/\[PROBLEME\](.+?)(?=\[|$)/s)?.[1]?.trim(),
//         reparation: text.match(/\[REPARATION\](.+?)(?=\[|$)/s)?.[1]?.trim(),
//         outils: text.match(/\[OUTILS\](.+?)(?=\[|$)/s)?.[1]?.trim()
//       };

//       if (!result.objet) throw new Error('Format de r√©ponse invalide');
//       return result;
//     };

//     const rawText = response.choices[0].message.content;
//     console.log("R√©ponse GPT brute :", rawText);
//     const { objet, probleme, reparation, outils } = extractData(response.choices[0].message.content);

//     // 5. Recherche vid√©o
//     const videos = await searchRepairVideos(`${objet.split(' ')[0]} r√©paration`);

//     return {
//       success: true,
//       objet,
//       probleme,
//       solution: reparation,
//       outils,
//       videos: videos.slice(0, 3) // Limite √† 3 r√©sultats
//     };

//   } catch (error) {
//     console.error('Erreur:', error.message);
//     return {
//       success: false,
//       error: error.response?.data?.error?.message || error.message,
//       conseil: "Essayez avec une photo plus nette ou pr√©cisez la description"
//     };
//   }
// };






// const fs = require('fs');
// const { openai, extractKeywordFromText } = require('./openaiService');
// const { searchRepairVideos } = require('./youtubeService');

// exports.detectObject = async (filePath, mimetype) => {
//   try {
//     // 1. Chargement de l'image
//     const imageData = fs.readFileSync(filePath, { encoding: 'base64' });

//     // 2. Prompt optimis√© pour GPT-4o
//     const REPAIR_PROMPT = `
//     Analyse cette image d'objet √† r√©parer en r√©pondant STRICTEMENT dans ce format :

//     [OBJET] Description technique (mat√©riau, dimensions visibles)
//     [PROBLEME] Diagnostic pr√©cis (type de dommage)
//     [REPARATION] 3 √©tapes MAX avec :
//     1. √âtape 1
//     2. √âtape 2
//     3. √âtape 3
//     [OUTILS] Liste technique

//     Exemple :
//     [OBJET] Vase en c√©ramique (30cm), √©maillage blanc
//     [PROBLEME] Cassure nette avec 2 fragments d√©tach√©s
//     [REPARATION] 
//     1. Nettoyer les bords
//     2. Appliquer colle epoxy
//     3. Maintenir 24h sous pression
//     [OUTILS] Colle epoxy, serre-joints, pinceau fin
//     `;

//     // 3. Appel API OpenAI
//     const response = await openai.chat.completions.create({
//       model: 'gpt-4o',
//       messages: [
//         {
//           role: 'system',
//           content: 'Tu es un expert en r√©paration. Sois technique et concis.'
//         },
//         {
//           role: 'user',
//           content: [
//             { type: 'text', text: REPAIR_PROMPT },
//             {
//               type: 'image_url',
//               image_url: {
//                 url: `data:${mimetype};base64,${imageData}`
//               }
//             }
//           ]
//         }
//       ],
//       max_tokens: 1000,
//       temperature: 0.2
//     });

//     // 4. Extraction des donn√©es
//     const extractData = (text) => {
//       const result = {
//         objet: text.match(/\[OBJET\](.+?)(?=\[|$)/s)?.[1]?.trim(),
//         probleme: text.match(/\[PROBLEME\](.+?)(?=\[|$)/s)?.[1]?.trim(),
//         reparation: text.match(/\[REPARATION\](.+?)(?=\[|$)/s)?.[1]?.trim(),
//         outils: text.match(/\[OUTILS\](.+?)(?=\[|$)/s)?.[1]?.trim()
//       };

//       if (!result.objet) throw new Error('Format de r√©ponse invalide');
//       return result;
//     };

//     const rawText = response.choices[0].message.content;
//     console.log("R√©ponse GPT brute :", rawText);

//     const { objet, probleme, reparation, outils } = extractData(rawText);

//     // 5. Recherche vid√©o
//     // const videos = await searchRepairVideos(`${objet.split(' ')[0]} r√©paration`);
//      const keyword = await extractKeywordFromText(rawText);
//      const videos = await searchRepairVideos(`${keyword} r√©paration`);

//     return {
//       success: true,
//       objet,
//       probleme,
//       solution: reparation,
//       outils,
//       keyword,
//       videos: videos.slice(0, 3) // Limite √† 3 r√©sultats
//     };

//   } catch (error) {
//     console.error('Erreur:', error.message);
//     return {
//       success: false,
//       error: error.response?.data?.error?.message || error.message,
//       conseil: "Essayez avec une photo plus nette ou pr√©cisez la description"
//     };
//   }
// };






const fs = require('fs');
const { openai, extractKeywordFromText } = require('./openaiService');
const { searchRepairVideos } = require('./youtubeService');

exports.detectObject = async (filePath, mimetype) => {
  try {
    // 1. Chargement de l'image
    const imageData = fs.readFileSync(filePath, { encoding: 'base64' });

    // 2. Prompt optimis√© sans ```markdown```
    const REPAIR_PROMPT = `
Analyse cette image d'objet √† r√©parer en r√©pondant dans ce format :

[OBJET] Description technique (mat√©riau, dimensions visibles)
[PROBLEME] Diagnostic pr√©cis (type de dommage)
[REPARATION] 3 √©tapes MAX avec :
1. √âtape 1
2. √âtape 2
3. √âtape 3
[OUTILS] Liste technique

Exemple :
[OBJET] Vase en c√©ramique (30cm), √©maillage blanc
[PROBLEME] Cassure nette avec 2 fragments d√©tach√©s
[REPARATION]
1. Nettoyer les bords
2. Appliquer colle epoxy
3. Maintenir 24h sous pression
[OUTILS] Colle epoxy, serre-joints, pinceau fin
`;

    // 3. Appel API OpenAI
    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'Tu es un expert en r√©paration. Sois technique et concis.'
        },
        {
          role: 'user',
          content: [
            { type: 'text', text: REPAIR_PROMPT },
            {
              type: 'image_url',
              image_url: {
                url: `data:${mimetype};base64,${imageData}`
              }
            }
          ]
        }
      ],
      max_tokens: 1000,
      temperature: 0.2
    });

    // 4. Nettoyage et extraction
    let rawText = response.choices[0].message.content;
    console.log("R√©ponse GPT brute :", rawText);

    // Supprime les ```markdown``` s'ils sont pr√©sents
    if (rawText.includes('```')) {
      rawText = rawText.replace(/```(?:plaintext)?\n?/g, '').replace(/```$/, '').trim();
    }

    console.log("üßº Texte nettoy√© :", rawText);

    const extractData = (text) => {
      const result = {
        objet: text.match(/\[OBJET\](.+?)(?=\[|$)/s)?.[1]?.trim(),
        probleme: text.match(/\[PROBLEME\](.+?)(?=\[|$)/s)?.[1]?.trim(),
        reparation: text.match(/\[REPARATION\](.+?)(?=\[|$)/s)?.[1]?.trim(),
        outils: text.match(/\[OUTILS\](.+?)(?=\[|$)/s)?.[1]?.trim()
      };

      if (!result.objet) throw new Error('Format de r√©ponse invalide');
      return result;
    };

    const { objet, probleme, reparation, outils } = extractData(rawText);

    // 5. Recherche vid√©o
    const keyword = await extractKeywordFromText(rawText);
    const videos = await searchRepairVideos(`${keyword} r√©paration`);

    return {
      success: true,
      objet,
      probleme,
      solution: reparation,
      outils,
      keyword,
      videos: videos.slice(0, 3)
    };

  } catch (error) {
    console.error('Erreur:', error.message);
    return {
      success: false,
      error: error.response?.data?.error?.message || error.message,
      conseil: "Essayez avec une photo plus nette ou pr√©cisez la description"
    };
  }
};
